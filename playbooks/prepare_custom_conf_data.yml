---
- hosts: all[0]
  connection: local
  gather_facts: false
  vars:
    - data_dir: "{{inventory_dir}}/../custom_config_data"
    - running_dir: "{{inventory_dir}}/../gen_custom_conf_data"

  tasks:
    - name: Include secret variables
      include_vars: "{{inventory_dir}}/group_vars/secrets.yml"

    - name: Create contract and get transaction hash
      when: TX_HASH == 'new'
      block:
        - name: Create contract
          shell: "docker run --network host --rm -v {{running_dir}}/combined.json:/data/combined.json --entrypoint ethereal ethstaker/eth-val-tools contract deploy --network={{NETWORK}} --name=DepositContract --json=/data/combined.json --from={{ETH1_FROM_ADDR}} --privatekey={{ETH1_FROM_PRIV}}"
          register: contract_output

        - name: Set transaction hash variable
          set_fact:
            TX_HASH: "{{contract_output.stdout}}"
          when: contract_output.rc == 0
          failed_when: contract_output.rc >= 1

        - name: Created transaction hash
          debug:
            msg: |
              TRANSACTION HASH: {{TX_HASH}}
              URL: https://{{NETWORK}}.etherscan.io/tx/{{TX_HASH}}

    - name: Get details from transaction hash
      command: "python3 {{running_dir}}/transaction.py https://{{NETWORK}}.etherscan.io {{TX_HASH}}"
      register: transaction_hash_details
      until: transaction_hash_details is succeeded
      retries: 10
      delay: 30

    - name: Parse json
      set_fact:
        transaction_hash_details: "{{ transaction_hash_details.stdout | from_json }}"

    - name: Convert epoch to date full
      shell: "echo {{MIN_GENESIS_TIME}} | perl -pe 's/(\\d+)/localtime($1)/e'"
      register: DATE_FULL

    - name: Remove testnet data dir first
      file:
        path: "{{data_dir}}"
        state: absent

    - name: Creates testnet data dir
      file:
        path: "{{data_dir}}"
        state: directory

    - name: Testnet custom conf data
      include_tasks: tasks/testnet_custom_conf_data.yml
      with_dict: "{{ TESTS }}"
      loop_control:
        loop_var: test
